package ArduinoML.textGen;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public abstract class MelodySetup {
  public static void declareMelodies(List<SNode> melodies, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("// declaring melodies ");
    tgs.newLine();

    ListSequence.fromList(melodies).visitAll(new IVisitor<SNode>() {
      public void visit(SNode melody) {
        final List<Integer> beats = ListSequence.fromList(new ArrayList<Integer>());
        final List<Integer> notes = ListSequence.fromList(new ArrayList<Integer>());

        ListSequence.fromList(SLinkOperations.getChildren(melody, MetaAdapterFactory.getContainmentLink(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df11aL, 0x6bc7b3d27b5df15dL, "notes"))).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            ListSequence.fromList(beats).addElement(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df127L, 0x6bc7b3d27bcf7fadL, "duration")));
            ListSequence.fromList(notes).addElement(Utils.computeFrequency(it));
          }
        });
        tgs.append("int ");
        tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        tgs.append("_notes [] = {");
        tgs.append("" + ListSequence.fromList(notes).first());
        ListSequence.fromList(notes).skip(1).visitAll(new IVisitor<Integer>() {
          public void visit(Integer it) {
            tgs.append(", " + it);
          }
        });
        tgs.append("};");
        tgs.newLine();

        tgs.append("int ");
        tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        tgs.append("_beats [] = {");
        tgs.append("" + ListSequence.fromList(beats).first());
        ListSequence.fromList(beats).skip(1).visitAll(new IVisitor<Integer>() {
          public void visit(Integer it) {
            tgs.append(", " + it);
          }
        });
        tgs.append("};");
        tgs.newLine();

        tgs.append("int i_");
        tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        tgs.append(" = 0;");
        tgs.newLine();
        tgs.newLine();

      }
    });
  }
  public static void getNote(SNode melody, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    tgs.append("_notes[i_");
    tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    tgs.append("]");
  }
  public static void getBeat(SNode melody, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    tgs.append("_beats[i_");
    tgs.append(SPropertyOperations.getString(melody, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    tgs.append("]");
  }
}
