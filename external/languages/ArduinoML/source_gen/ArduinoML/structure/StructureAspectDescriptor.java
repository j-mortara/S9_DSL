package ArduinoML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAction = createDescriptorForAction();
  /*package*/ final ConceptDescriptor myConceptActuator = createDescriptorForActuator();
  /*package*/ final ConceptDescriptor myConceptAnalogCondition = createDescriptorForAnalogCondition();
  /*package*/ final ConceptDescriptor myConceptAnalogSensor = createDescriptorForAnalogSensor();
  /*package*/ final ConceptDescriptor myConceptApp = createDescriptorForApp();
  /*package*/ final ConceptDescriptor myConceptBrick = createDescriptorForBrick();
  /*package*/ final ConceptDescriptor myConceptCondition = createDescriptorForCondition();
  /*package*/ final ConceptDescriptor myConceptEquals = createDescriptorForEquals();
  /*package*/ final ConceptDescriptor myConceptGreaterThan = createDescriptorForGreaterThan();
  /*package*/ final ConceptDescriptor myConceptLowerThan = createDescriptorForLowerThan();
  /*package*/ final ConceptDescriptor myConceptMelody = createDescriptorForMelody();
  /*package*/ final ConceptDescriptor myConceptMelodyNote = createDescriptorForMelodyNote();
  /*package*/ final ConceptDescriptor myConceptMode = createDescriptorForMode();
  /*package*/ final ConceptDescriptor myConceptModeTransition = createDescriptorForModeTransition();
  /*package*/ final ConceptDescriptor myConceptPlayNote = createDescriptorForPlayNote();
  /*package*/ final ConceptDescriptor myConceptPlayNoteFromMelody = createDescriptorForPlayNoteFromMelody();
  /*package*/ final ConceptDescriptor myConceptSensor = createDescriptorForSensor();
  /*package*/ final ConceptDescriptor myConceptSimpleAction = createDescriptorForSimpleAction();
  /*package*/ final ConceptDescriptor myConceptSpeaker = createDescriptorForSpeaker();
  /*package*/ final ConceptDescriptor myConceptState = createDescriptorForState();
  /*package*/ final ConceptDescriptor myConceptStateTransition = createDescriptorForStateTransition();
  /*package*/ final ConceptDescriptor myConceptTransition = createDescriptorForTransition();
  /*package*/ final EnumerationDescriptor myEnumerationNOTE = new EnumerationDescriptor_NOTE();
  /*package*/ final EnumerationDescriptor myEnumerationSIGNAL = new EnumerationDescriptor_SIGNAL();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAction, myConceptActuator, myConceptAnalogCondition, myConceptAnalogSensor, myConceptApp, myConceptBrick, myConceptCondition, myConceptEquals, myConceptGreaterThan, myConceptLowerThan, myConceptMelody, myConceptMelodyNote, myConceptMode, myConceptModeTransition, myConceptPlayNote, myConceptPlayNoteFromMelody, myConceptSensor, myConceptSimpleAction, myConceptSpeaker, myConceptState, myConceptStateTransition, myConceptTransition);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Action:
        return myConceptAction;
      case LanguageConceptSwitch.Actuator:
        return myConceptActuator;
      case LanguageConceptSwitch.AnalogCondition:
        return myConceptAnalogCondition;
      case LanguageConceptSwitch.AnalogSensor:
        return myConceptAnalogSensor;
      case LanguageConceptSwitch.App:
        return myConceptApp;
      case LanguageConceptSwitch.Brick:
        return myConceptBrick;
      case LanguageConceptSwitch.Condition:
        return myConceptCondition;
      case LanguageConceptSwitch.Equals:
        return myConceptEquals;
      case LanguageConceptSwitch.GreaterThan:
        return myConceptGreaterThan;
      case LanguageConceptSwitch.LowerThan:
        return myConceptLowerThan;
      case LanguageConceptSwitch.Melody:
        return myConceptMelody;
      case LanguageConceptSwitch.MelodyNote:
        return myConceptMelodyNote;
      case LanguageConceptSwitch.Mode:
        return myConceptMode;
      case LanguageConceptSwitch.ModeTransition:
        return myConceptModeTransition;
      case LanguageConceptSwitch.PlayNote:
        return myConceptPlayNote;
      case LanguageConceptSwitch.PlayNoteFromMelody:
        return myConceptPlayNoteFromMelody;
      case LanguageConceptSwitch.Sensor:
        return myConceptSensor;
      case LanguageConceptSwitch.SimpleAction:
        return myConceptSimpleAction;
      case LanguageConceptSwitch.Speaker:
        return myConceptSpeaker;
      case LanguageConceptSwitch.State:
        return myConceptState;
      case LanguageConceptSwitch.StateTransition:
        return myConceptStateTransition;
      case LanguageConceptSwitch.Transition:
        return myConceptTransition;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationNOTE, myEnumerationSIGNAL);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Action", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b610732L);
    b.interface_();
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7766373799018170162");
    b.version(2);
    b.associate("target", 0x36166a13252ed3aL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed16L).optional(false).origin("243588697374780730").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForActuator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Actuator", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed16L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x353626c37b504441L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/243588697374780694");
    b.version(2);
    b.alias("actuator");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAnalogCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "AnalogCondition", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0ddcb802L);
    b.interface_();
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a899L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/259496194770515970");
    b.version(2);
    b.property("rightOperand", 0x399ea6a0ddcb815L).type(PrimitiveTypeId.INTEGER).origin("259496194770515989").done();
    b.associate("leftOperand", 0x399ea6a0ddcb80aL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0dd02e2fL).optional(false).origin("259496194770515978").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAnalogSensor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "AnalogSensor", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0dd02e2fL);
    b.class_(false, false, false);
    b.super_("ArduinoML.structure.Sensor", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x631acfca1ce21c26L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/259496194769694255");
    b.version(2);
    b.alias("analog sensor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForApp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "App", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed0cL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/243588697374780684");
    b.version(2);
    b.associate("initialMode", 0x353626c37b53cd9bL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a52cL).optional(false).origin("3834294753782123931").done();
    b.aggregate("bricks", 0x36166a13252ed72L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x353626c37b504441L).optional(false).ordered(true).multiple(true).origin("243588697374780786").done();
    b.aggregate("melodies", 0x6bc7b3d27bb8847aL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df11aL).optional(true).ordered(true).multiple(true).origin("7766373799023903866").done();
    b.aggregate("modes", 0x36166a13252ed6eL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a52cL).optional(false).ordered(true).multiple(true).origin("243588697374780782").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBrick() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Brick", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x353626c37b504441L);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/3834294753781892161");
    b.version(2);
    b.property("pin", 0x353626c37b50444cL).type(PrimitiveTypeId.INTEGER).origin("3834294753781892172").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Condition", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a899L);
    b.interface_();
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/1445630622441056409");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEquals() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Equals", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x701814eea40fc574L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a899L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/8077228946876253556");
    b.version(2);
    b.property("signal", 0x701814eea4247b1bL).type(MetaIdFactory.dataTypeId(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed20L)).origin("8077228946877610779").done();
    b.property("rightOperand", 0x399ea6a0ddb6d35L).type(PrimitiveTypeId.INTEGER).origin("259496194770431285").done();
    b.associate("leftOperand", 0x399ea6a0ddb6d38L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x631acfca1ce21c26L).optional(false).origin("259496194770431288").done();
    b.alias("equals");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "GreaterThan", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a8a2L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0ddcb802L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/1445630622441056418");
    b.version(2);
    b.alias("greater than");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLowerThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "LowerThan", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a8a5L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0ddcb802L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/1445630622441056421");
    b.version(2);
    b.alias("lower than");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMelody() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Melody", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df11aL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7766373799017967898");
    b.version(2);
    b.aggregate("notes", 0x6bc7b3d27b5df15dL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df127L).optional(false).ordered(true).multiple(true).origin("7766373799017967965").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMelodyNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "MelodyNote", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df127L);
    b.class_(false, false, false);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7766373799017967911");
    b.version(2);
    b.property("value", 0x6bc7b3d27b5df14eL).type(MetaIdFactory.dataTypeId(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5deedeL)).origin("7766373799017967950").done();
    b.property("duration", 0x6bc7b3d27bcf7fadL).type(PrimitiveTypeId.INTEGER).origin("7766373799025409965").done();
    b.property("octave", 0x7cd55a217c3f9fe9L).type(PrimitiveTypeId.INTEGER).origin("8995194930607398889").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Mode", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a52cL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/1445630622441055532");
    b.version(2);
    b.associate("initialState", 0x140fe9644f11e534L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed1bL).optional(false).origin("1445630622441792820").done();
    b.aggregate("states", 0x140fe9644f06a52fL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed1bL).optional(false).ordered(true).multiple(true).origin("1445630622441055535").done();
    b.aggregate("transitions", 0x140fe9644f06a623L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a535L).optional(true).ordered(true).multiple(true).origin("1445630622441055779").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModeTransition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "ModeTransition", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a535L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0ddafed4L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/1445630622441055541");
    b.version(2);
    b.associate("nextMode", 0x140fe9644f06a538L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a52cL).optional(false).origin("1445630622441055544").done();
    b.alias("transition");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlayNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "PlayNote", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5e710bL);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b610732L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7766373799018000651");
    b.version(2);
    b.aggregate("note", 0x7cd55a217c6f4daaL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df127L).optional(false).ordered(true).multiple(false).origin("8995194930610523562").done();
    b.alias("play note");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlayNoteFromMelody() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "PlayNoteFromMelody", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27bd80508L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b610732L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7766373799025968392");
    b.version(2);
    b.associate("melody", 0x6bc7b3d27bd8050bL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b5df11aL).optional(false).origin("7766373799025968395").done();
    b.associate("dj", 0x156472ce91384a15L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0dd02e2fL).optional(true).origin("1541483203992766997").done();
    b.alias("play note from melody");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSensor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Sensor", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x631acfca1ce21c26L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x353626c37b504441L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7141248626124266534");
    b.version(2);
    b.alias("sensor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSimpleAction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "SimpleAction", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed1eL);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b610732L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/243588697374780702");
    b.version(2);
    b.property("signal", 0x36166a13252ed25L).type(MetaIdFactory.dataTypeId(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed20L)).origin("243588697374780709").done();
    b.alias("put");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpeaker() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Speaker", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27bac6d0cL);
    b.class_(false, false, false);
    b.super_("ArduinoML.structure.Actuator", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed16L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/7766373799023111436");
    b.version(2);
    b.alias("speaker");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForState() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "State", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed1bL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/243588697374780699");
    b.version(2);
    b.aggregate("actions", 0x36166a13252ed37L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x6bc7b3d27b610732L).optional(true).ordered(true).multiple(true).origin("243588697374780727").done();
    b.aggregate("transitions", 0x353626c37b555c2bL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x353626c37b555c24L).optional(false).ordered(true).multiple(true).origin("3834294753782225963").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStateTransition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "StateTransition", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x353626c37b555c24L);
    b.class_(false, false, false);
    b.parent(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0ddafed4L);
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/3834294753782225956");
    b.version(2);
    b.associate("nextState", 0x353626c37b555c25L).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x36166a13252ed1bL).optional(false).origin("3834294753782225957").done();
    b.alias("transition");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTransition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ArduinoML", "Transition", 0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x399ea6a0ddafed4L);
    b.interface_();
    b.origin("r:b2310a53-b5df-477e-9bab-f808bca79a57(ArduinoML.structure)/259496194770403028");
    b.version(2);
    b.aggregate("condition", 0x399ea6a0ddafedaL).target(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x140fe9644f06a899L).optional(false).ordered(true).multiple(false).origin("259496194770403034").done();
    return b.create();
  }
}
