package ArduinoML.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int Actuator = 1;
  public static final int AnalogCondition = 2;
  public static final int AnalogSensor = 3;
  public static final int App = 4;
  public static final int Brick = 5;
  public static final int Condition = 6;
  public static final int DigitalSensor = 7;
  public static final int Equals = 8;
  public static final int GreaterThan = 9;
  public static final int LowerThan = 10;
  public static final int Melody = 11;
  public static final int MelodyNote = 12;
  public static final int Mode = 13;
  public static final int ModeTransition = 14;
  public static final int Parameter = 15;
  public static final int PlayNote = 16;
  public static final int PlayNoteFromMelody = 17;
  public static final int Sensor = 18;
  public static final int SimpleAction = 19;
  public static final int Speaker = 20;
  public static final int State = 21;
  public static final int StateTransition = 22;
  public static final int Transition = 23;
  public static final int Watch = 24;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x8a1177a2191f4d85L, 0xb39864536e65e675L);
    builder.put(0x6bc7b3d27b610732L, Action);
    builder.put(0x36166a13252ed16L, Actuator);
    builder.put(0x399ea6a0ddcb802L, AnalogCondition);
    builder.put(0x399ea6a0dd02e2fL, AnalogSensor);
    builder.put(0x36166a13252ed0cL, App);
    builder.put(0x353626c37b504441L, Brick);
    builder.put(0x140fe9644f06a899L, Condition);
    builder.put(0x631acfca1ce21c26L, DigitalSensor);
    builder.put(0x701814eea40fc574L, Equals);
    builder.put(0x140fe9644f06a8a2L, GreaterThan);
    builder.put(0x140fe9644f06a8a5L, LowerThan);
    builder.put(0x6bc7b3d27b5df11aL, Melody);
    builder.put(0x6bc7b3d27b5df127L, MelodyNote);
    builder.put(0x140fe9644f06a52cL, Mode);
    builder.put(0x140fe9644f06a535L, ModeTransition);
    builder.put(0x601b82c1a3a75680L, Parameter);
    builder.put(0x6bc7b3d27b5e710bL, PlayNote);
    builder.put(0x6bc7b3d27bd80508L, PlayNoteFromMelody);
    builder.put(0x488b19789b3af475L, Sensor);
    builder.put(0x36166a13252ed1eL, SimpleAction);
    builder.put(0x6bc7b3d27bac6d0cL, Speaker);
    builder.put(0x36166a13252ed1bL, State);
    builder.put(0x353626c37b555c24L, StateTransition);
    builder.put(0x399ea6a0ddafed4L, Transition);
    builder.put(0x4004dad9fa875ee0L, Watch);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
