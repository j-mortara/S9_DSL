package ArduinoML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Actuator;
  private ConceptPresentation props_AnalogCondition;
  private ConceptPresentation props_AnalogSensor;
  private ConceptPresentation props_App;
  private ConceptPresentation props_Brick;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_DigitalSensor;
  private ConceptPresentation props_Equals;
  private ConceptPresentation props_GreaterThan;
  private ConceptPresentation props_LowerThan;
  private ConceptPresentation props_Melody;
  private ConceptPresentation props_MelodyNote;
  private ConceptPresentation props_Mode;
  private ConceptPresentation props_ModeTransition;
  private ConceptPresentation props_Parameter;
  private ConceptPresentation props_PlayNote;
  private ConceptPresentation props_PlayNoteFromMelody;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_SimpleAction;
  private ConceptPresentation props_Speaker;
  private ConceptPresentation props_State;
  private ConceptPresentation props_StateTransition;
  private ConceptPresentation props_Transition;
  private ConceptPresentation props_Watch;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Actuator:
        if (props_Actuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actuator = cpb.create();
        }
        return props_Actuator;
      case LanguageConceptSwitch.AnalogCondition:
        if (props_AnalogCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AnalogCondition = cpb.create();
        }
        return props_AnalogCondition;
      case LanguageConceptSwitch.AnalogSensor:
        if (props_AnalogSensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AnalogSensor = cpb.create();
        }
        return props_AnalogSensor;
      case LanguageConceptSwitch.App:
        if (props_App == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_App = cpb.create();
        }
        return props_App;
      case LanguageConceptSwitch.Brick:
        if (props_Brick == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Brick = cpb.create();
        }
        return props_Brick;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.DigitalSensor:
        if (props_DigitalSensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DigitalSensor = cpb.create();
        }
        return props_DigitalSensor;
      case LanguageConceptSwitch.Equals:
        if (props_Equals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("equals");
          props_Equals = cpb.create();
        }
        return props_Equals;
      case LanguageConceptSwitch.GreaterThan:
        if (props_GreaterThan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("greater than");
          props_GreaterThan = cpb.create();
        }
        return props_GreaterThan;
      case LanguageConceptSwitch.LowerThan:
        if (props_LowerThan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("lower than");
          props_LowerThan = cpb.create();
        }
        return props_LowerThan;
      case LanguageConceptSwitch.Melody:
        if (props_Melody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Melody = cpb.create();
        }
        return props_Melody;
      case LanguageConceptSwitch.MelodyNote:
        if (props_MelodyNote == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MelodyNote");
          props_MelodyNote = cpb.create();
        }
        return props_MelodyNote;
      case LanguageConceptSwitch.Mode:
        if (props_Mode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Mode = cpb.create();
        }
        return props_Mode;
      case LanguageConceptSwitch.ModeTransition:
        if (props_ModeTransition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("transition");
          props_ModeTransition = cpb.create();
        }
        return props_ModeTransition;
      case LanguageConceptSwitch.Parameter:
        if (props_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Parameter");
          props_Parameter = cpb.create();
        }
        return props_Parameter;
      case LanguageConceptSwitch.PlayNote:
        if (props_PlayNote == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Plays a music note");
          cpb.rawPresentation("play note");
          props_PlayNote = cpb.create();
        }
        return props_PlayNote;
      case LanguageConceptSwitch.PlayNoteFromMelody:
        if (props_PlayNoteFromMelody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Plays the next note of the given melody");
          cpb.rawPresentation("play note from melody");
          props_PlayNoteFromMelody = cpb.create();
        }
        return props_PlayNoteFromMelody;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.SimpleAction:
        if (props_SimpleAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Puts the given actuator to the given signal");
          cpb.rawPresentation("put");
          props_SimpleAction = cpb.create();
        }
        return props_SimpleAction;
      case LanguageConceptSwitch.Speaker:
        if (props_Speaker == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Speaker = cpb.create();
        }
        return props_Speaker;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.StateTransition:
        if (props_StateTransition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("transition");
          props_StateTransition = cpb.create();
        }
        return props_StateTransition;
      case LanguageConceptSwitch.Transition:
        if (props_Transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Transition = cpb.create();
        }
        return props_Transition;
      case LanguageConceptSwitch.Watch:
        if (props_Watch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x8a1177a2191f4d85L, 0xb39864536e65e675L, 0x4004dad9fa875ee0L, 0x4004dad9faa17f22L, "sensor", "", "");
          props_Watch = cpb.create();
        }
        return props_Watch;
    }
    return null;
  }
}
